{{ reserveImport "context" }}
{{ reserveImport "log" }}
{{ reserveImport "net/http" }}
{{ reserveImport "os" }}

{{ reserveImport "github.com/99designs/gqlgen/graphql/playground" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/handler" }}
{{ reserveImport "github.com/jackc/pgx/v5/pgxpool" }}
{{ reserveImport "github.com/roneli/fastgql/pkg/execution/builders" }}
{{ reserveImport "github.com/roneli/fastgql/pkg/log/adapters" }}

const defaultPort = "8080"

const defaultPGConnection = "postgresql://localhost/postgres?user=postgres"

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = defaultPort
	}
    pgConnectionString := os.Getenv("PG_CONN_STR")
    if pgConnectionString == "" {
        pgConnectionString = defaultPGConnection
    }

    pool, err := pgxpool.New(context.Background(), pgConnectionString)
    if err != nil {
        panic(err)
    }
    defer pool.Close()
    resolver :=  &{{ lookupImport .ResolverPackageName}}.Resolver{Executor: pool}
    executableSchema := {{ lookupImport .ExecPackageName }}.NewExecutableSchema({{ lookupImport .ExecPackageName}}.Config{Resolvers:resolver})
    // Add logger to config for building trace logging
	cfg := &builders.Config{Schema: executableSchema.Schema(), Logger: nil}
	resolver.Cfg = cfg
	resolver.Executor = pool

	srv := handler.NewDefaultServer(executableSchema)
	http.Handle("/", playground.Handler("GraphQL playground", "/query"))
	http.Handle("/query", srv)
	log.Printf("connect to http://localhost:%s/ for GraphQL playground", port)
	log.Fatal(http.ListenAndServe(":" + port, nil))
}