type User @generateFilterInput(name: "UserFilterInput") @table(name: "user", schema: "app"){
    id: Int!
    name: String!
    posts: [Post] @relation(type: ONE_TO_MANY, fields: ["id"], references: ["user_id"])
    someOtherName: [Post] @relation(type: ONE_TO_MANY, fields: ["id"], references: ["user_id"])
}

type Post @generateFilterInput(name: "PostFilterInput") @table(name: "posts") @generateMutations(create: true, delete: true) {
    id: Int!
    name: String
    categories: [Category] @relation(type: MANY_TO_MANY, fields: ["id"], references: ["id"]
        manyToManyTable: "posts_to_categories", manyToManyFields: ["post_id"], manyToManyReferences: ["category_id"])
    user: User @relation(type: ONE_TO_ONE, fields: ["user_id"], references: ["id"])
}

type Category @generateFilterInput(name: "CategoryFilterInput"){
    id: Int!
    name: String
}

type Query @generate {
    posts: [Post]
    users: [User]
    categories: [Category] @skipGenerate
}

enum _relationType {
    ONE_TO_ONE
    ONE_TO_MANY
    MANY_TO_MANY
}


# Table directive is defined on OBJECTS, if no table directive is defined defaults are assumed
# i.e <type_name>, "postgres", ""
directive @table(name: String!, dialect: String! = "postgres", schema: String = "") on OBJECT | INTERFACE

# Relation directive defines relations cross tables and dialects
directive @relation(type: _relationType!, fields: [String!]!, references: [String!]!, manyToManyTable: String = "", manyToManyFields: [String] = [], manyToManyReferences: [String] = []) on FIELD_DEFINITION

# used to skip generate on a certain field, this should be used if we use recursive = True in @generate
directive @skipGenerate(resolver: Boolean = True) on FIELD_DEFINITION

# Generate filter input on an object
directive @generateFilterInput(name: String!, description: String) repeatable on OBJECT | INTERFACE

# Generate arguments for a given field or all object fields
directive @generate(filter: Boolean = True, pagination: Boolean = True, ordering: Boolean = True, aggregate: Boolean = True,
    recursive: Boolean = True, wrapper:Boolean = False) repeatable  on OBJECT

directive @generateMutations(create: Boolean = True, delete: Boolean = True, update: Boolean = True) on OBJECT

enum _OrderingTypes {
    ASC
    DESC
    ASC_NULL_FIRST
    DESC_NULL_FIRST
}

type _AggregateResult {
    count: Int!
}

input StringComparator {
    eq: String
    neq: String
    contains: [String]
    not_contains: [String]
    like: String
    ilike: String
    suffix: String
    prefix: String
}

input StringListComparator {
    eq: [String]
    neq: [String]
    contains: [String]
    containedBy: [String]
    overlap: [String]
}

input IntComparator {
    eq: Int
    neq: Int
    gt: Int
    gte: Int
    lt: Int
    lte: Int
}

input IntListComparator {
    eq: [Int]
    neq: [Int]
    contains: [Int]
    contained: [Int]
    overlap: [Int]
}

input BooleanComparator {
    eq: Boolean
    neq: Boolean
}

input BooleanListComparator {
    eq: [Boolean]
    neq: [Boolean]
    contains: [Boolean]
    contained: [Boolean]
    overlap: [Boolean]
}
