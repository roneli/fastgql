directive @generate(filter: Boolean = True, pagination: Boolean = True, ordering: Boolean = True, aggregate: Boolean = True, recursive: Boolean = True, wrapper: Boolean = False) on OBJECT
directive @generateFilterInput(name: String!, description: String) on OBJECT | INTERFACE
directive @generateMutations(create: Boolean = True, delete: Boolean = True, update: Boolean = True) on OBJECT
directive @skipGenerate(resolver: Boolean = True) on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION


directive @relation(type: _relationType!, fields: [String!]!, references: [String!]!, manyToManyTable: String = "", manyToManyFields: [String] = [], manyToManyReferences: [String] = []) on FIELD_DEFINITION
directive @table(name: String!, dialect: String! = "postgres", schema: String = "") on OBJECT | INTERFACE

input BooleanComparator {
	eq: Boolean
	neq: Boolean
	isNull: Boolean
}
input BooleanListComparator {
	eq: [Boolean]
	neq: [Boolean]
	contains: [Boolean]
	contained: [Boolean]
	overlap: [Boolean]
	isNull: Boolean
}
input FloatComparator {
	eq: Float
	neq: Float
	gt: Float
	gte: Float
	lt: Float
	lte: Float
	isNull: Boolean
}
input FloatListComparator {
	eq: [Float]
	neq: [Float]
	contains: [Float]
	contained: [Float]
	overlap: [Float]
	isNull: Boolean
}
input IntComparator {
	eq: Int
	neq: Int
	gt: Int
	gte: Int
	lt: Int
	lte: Int
	isNull: Boolean
}
input IntListComparator {
	eq: [Int]
	neq: [Int]
	contains: [Int]
	contained: [Int]
	overlap: [Int]
	isNull: Boolean
}
input StringComparator {
	eq: String
	neq: String
	contains: [String]
	notContains: [String]
	like: String
	ilike: String
	suffix: String
	prefix: String
	isNull: Boolean
}
input StringListComparator {
	eq: [String]
	neq: [String]
	contains: [String]
	containedBy: [String]
	overlap: [String]
	isNull: Boolean
}
type _AggregateResult {
	count: Int!
}
enum _OrderingTypes {
	ASC
	DESC
	ASC_NULL_FIRST
	DESC_NULL_FIRST
}
enum _relationType {
	ONE_TO_ONE
	ONE_TO_MANY
	MANY_TO_MANY
}
