// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BooleanComparator struct {
	Eq     *bool `json:"eq,omitempty"`
	Neq    *bool `json:"neq,omitempty"`
	IsNull *bool `json:"isNull,omitempty"`
}

type BooleanListComparator struct {
	Eq        []*bool `json:"eq,omitempty"`
	Neq       []*bool `json:"neq,omitempty"`
	Contains  []*bool `json:"contains,omitempty"`
	Contained []*bool `json:"contained,omitempty"`
	Overlap   []*bool `json:"overlap,omitempty"`
	IsNull    *bool   `json:"isNull,omitempty"`
}

type FloatComparator struct {
	Eq     *float64 `json:"eq,omitempty"`
	Neq    *float64 `json:"neq,omitempty"`
	Gt     *float64 `json:"gt,omitempty"`
	Gte    *float64 `json:"gte,omitempty"`
	Lt     *float64 `json:"lt,omitempty"`
	Lte    *float64 `json:"lte,omitempty"`
	IsNull *bool    `json:"isNull,omitempty"`
}

type FloatListComparator struct {
	Eq        []*float64 `json:"eq,omitempty"`
	Neq       []*float64 `json:"neq,omitempty"`
	Contains  []*float64 `json:"contains,omitempty"`
	Contained []*float64 `json:"contained,omitempty"`
	Overlap   []*float64 `json:"overlap,omitempty"`
	IsNull    *bool      `json:"isNull,omitempty"`
}

type IntComparator struct {
	Eq     *int  `json:"eq,omitempty"`
	Neq    *int  `json:"neq,omitempty"`
	Gt     *int  `json:"gt,omitempty"`
	Gte    *int  `json:"gte,omitempty"`
	Lt     *int  `json:"lt,omitempty"`
	Lte    *int  `json:"lte,omitempty"`
	IsNull *bool `json:"isNull,omitempty"`
}

type IntListComparator struct {
	Eq        []*int `json:"eq,omitempty"`
	Neq       []*int `json:"neq,omitempty"`
	Contains  []*int `json:"contains,omitempty"`
	Contained []*int `json:"contained,omitempty"`
	Overlap   []*int `json:"overlap,omitempty"`
	IsNull    *bool  `json:"isNull,omitempty"`
}

type Person struct {
	Name *string `json:"name,omitempty"`
}

type StringComparator struct {
	Eq          *string   `json:"eq,omitempty"`
	Neq         *string   `json:"neq,omitempty"`
	Contains    []*string `json:"contains,omitempty"`
	NotContains []*string `json:"notContains,omitempty"`
	Like        *string   `json:"like,omitempty"`
	Ilike       *string   `json:"ilike,omitempty"`
	Suffix      *string   `json:"suffix,omitempty"`
	Prefix      *string   `json:"prefix,omitempty"`
	IsNull      *bool     `json:"isNull,omitempty"`
}

type StringListComparator struct {
	Eq          []*string `json:"eq,omitempty"`
	Neq         []*string `json:"neq,omitempty"`
	Contains    []*string `json:"contains,omitempty"`
	ContainedBy []*string `json:"containedBy,omitempty"`
	Overlap     []*string `json:"overlap,omitempty"`
	IsNull      *bool     `json:"isNull,omitempty"`
}

type User struct {
	Name               *string `json:"name,omitempty"`
	Age                *int    `json:"age,omitempty"`
	SomeInnerValue     *User   `json:"someInnerValue,omitempty"`
	SomeInnerValueList []*User `json:"someInnerValueList,omitempty"`
}

type UserFilterInput struct {
	Name               *StringComparator `json:"name,omitempty"`
	Age                *IntComparator    `json:"age,omitempty"`
	SomeInnerValue     *UserFilterInput  `json:"someInnerValue,omitempty"`
	SomeInnerValueList *UserFilterInput  `json:"someInnerValueList,omitempty"`
	// Logical AND of FilterInput
	And []*UserFilterInput `json:"AND,omitempty"`
	// Logical OR of FilterInput
	Or []*UserFilterInput `json:"OR,omitempty"`
	// Logical NOT of FilterInput
	Not *UserFilterInput `json:"NOT,omitempty"`
}

// max aggregator for User
type UserMin struct {
	// Compute the maxiumum for name
	Name string `json:"name"`
	// Compute the maxiumum for age
	Age int `json:"age"`
}

// Ordering for User
type UserOrdering struct {
	// Order User by name
	Name *OrderingTypes `json:"name,omitempty"`
	// Order User by age
	Age *OrderingTypes `json:"age,omitempty"`
}

// Aggregate User
type UsersAggregate struct {
	// Count results
	Count int `json:"count"`
	// Computes the maximum of the non-null input values.
	Max *UserMin `json:"max,omitempty"`
	// Computes the minimum of the non-null input values.
	Min *UserMin `json:"min,omitempty"`
}

type AggregateResult struct {
	Count int `json:"count"`
}

type OrderingTypes string

const (
	OrderingTypesAsc           OrderingTypes = "ASC"
	OrderingTypesDesc          OrderingTypes = "DESC"
	OrderingTypesAscNullFirst  OrderingTypes = "ASC_NULL_FIRST"
	OrderingTypesDescNullFirst OrderingTypes = "DESC_NULL_FIRST"
	OrderingTypesAscNullLast   OrderingTypes = "ASC_NULL_LAST"
	OrderingTypesDescNullLast  OrderingTypes = "DESC_NULL_LAST"
)

var AllOrderingTypes = []OrderingTypes{
	OrderingTypesAsc,
	OrderingTypesDesc,
	OrderingTypesAscNullFirst,
	OrderingTypesDescNullFirst,
	OrderingTypesAscNullLast,
	OrderingTypesDescNullLast,
}

func (e OrderingTypes) IsValid() bool {
	switch e {
	case OrderingTypesAsc, OrderingTypesDesc, OrderingTypesAscNullFirst, OrderingTypesDescNullFirst, OrderingTypesAscNullLast, OrderingTypesDescNullLast:
		return true
	}
	return false
}

func (e OrderingTypes) String() string {
	return string(e)
}

func (e *OrderingTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderingTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid _OrderingTypes", str)
	}
	return nil
}

func (e OrderingTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RelationType string

const (
	RelationTypeOneToOne   RelationType = "ONE_TO_ONE"
	RelationTypeOneToMany  RelationType = "ONE_TO_MANY"
	RelationTypeManyToMany RelationType = "MANY_TO_MANY"
)

var AllRelationType = []RelationType{
	RelationTypeOneToOne,
	RelationTypeOneToMany,
	RelationTypeManyToMany,
}

func (e RelationType) IsValid() bool {
	switch e {
	case RelationTypeOneToOne, RelationTypeOneToMany, RelationTypeManyToMany:
		return true
	}
	return false
}

func (e RelationType) String() string {
	return string(e)
}

func (e *RelationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid _relationType", str)
	}
	return nil
}

func (e RelationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
