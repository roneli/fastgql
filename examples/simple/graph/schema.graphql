type Person {
	name: String
}
type Query @generate(recursive: true) {
	person: Person! @skipGenerate
	user(
		"""
		Limit
		"""
		limit: Int = 100,
		"""
		Offset
		"""
		offset: Int = 0,
		"""
		Ordering for User
		"""
		orderBy: [UserOrdering],
		"""
		Filter user
		"""
		filter: UserFilterInput): [User]
	"""
	user Aggregate
	"""
	_userAggregate(
		"""
		Filter _userAggregate
		"""
		filter: UserFilterInput): UsersAggregate!
}
type User @generateFilterInput(name: "UserFilterInput") {
	name: String
	age: Int
	someInnerValue: User @goField(forceResolver: true) @skipGenerate
	someInnerValueLis(
		"""
		Limit
		"""
		limit: Int = 100,
		"""
		Offset
		"""
		offset: Int = 0,
		"""
		Ordering for User
		"""
		orderBy: [UserOrdering],
		"""
		Filter someInnerValueLis
		"""
		filter: UserFilterInput): [User]
	"""
	someInnerValueLis Aggregate
	"""
	_someInnerValueLisAggregate(
		"""
		Filter _someInnerValueLisAggregate
		"""
		filter: UserFilterInput): UsersAggregate!
}
