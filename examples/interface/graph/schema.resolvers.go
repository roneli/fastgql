package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"github.com/georgysavva/scany/v2/pgxscan"
	"github.com/jackc/pgx/v5"
	"github.com/roneli/fastgql/pkg/execution"
	"github.com/roneli/fastgql/pkg/execution/builders/sql"
	"reflect"

	"github.com/roneli/fastgql/examples/interface/graph/generated"
	"github.com/roneli/fastgql/examples/interface/graph/model"
)

// Person is the resolver for the person field.
func (r *queryResolver) Person(ctx context.Context) (model.Base, error) {
	scanner := execution.NewTypeNameScanner[model.Base](map[string]reflect.Type{
		"human": reflect.TypeOf(model.Human{}),
		"peron": reflect.TypeOf(model.Person{}),
	}, nil, "typeName")
	var data model.Base
	q, args, err := sql.BuildQuery(ctx, sql.NewBuilder(r.Cfg))
	if err != nil {
		return nil, err
	}
	if err := sql.ExecuteQuery(ctx, nil, func(rows pgx.Rows) error {
		for rows.Next() {
			scanner.Scan(rows.RawValues()[0])
		}
		return pgxscan.ScanAll(&data, rows)
	}, q, args...); err != nil {
		return nil, err
	}
	return data, nil

}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
