// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BooleanComparator struct {
	Eq  *bool `json:"eq"`
	Neq *bool `json:"neq"`
}

type BooleanListComparator struct {
	Eq        []*bool `json:"eq"`
	Neq       []*bool `json:"neq"`
	Contains  []*bool `json:"contains"`
	Contained []*bool `json:"contained"`
	Overlap   []*bool `json:"overlap"`
}

type Category struct {
	ID   int     `json:"id"`
	Name *string `json:"name"`
}

type CategoryFilterInput struct {
	ID   *IntComparator    `json:"id"`
	Name *StringComparator `json:"name"`
	// Logical AND of FilterInput
	And []*CategoryFilterInput `json:"AND"`
	// Logical OR of FilterInput
	Or []*CategoryFilterInput `json:"OR"`
	// Logical NOT of FilterInput
	Not *CategoryFilterInput `json:"NOT"`
}

// Ordering for Category
type CategoryOrdering struct {
	// Order Category by id
	ID *OrderingTypes `json:"id"`
	// Order Category by name
	Name *OrderingTypes `json:"name"`
}

type IntComparator struct {
	Eq  *int `json:"eq"`
	Neq *int `json:"neq"`
	Gt  *int `json:"gt"`
	Gte *int `json:"gte"`
	Lt  *int `json:"lt"`
	Lte *int `json:"lte"`
}

type IntListComparator struct {
	Eq        []*int `json:"eq"`
	Neq       []*int `json:"neq"`
	Contains  []*int `json:"contains"`
	Contained []*int `json:"contained"`
	Overlap   []*int `json:"overlap"`
}

type Post struct {
	ID         int         `json:"id"`
	Name       *string     `json:"name"`
	Categories []*Category `json:"categories"`
	User       *User       `json:"user"`
}

type PostFilterInput struct {
	ID         *IntComparator       `json:"id"`
	Name       *StringComparator    `json:"name"`
	Categories *CategoryFilterInput `json:"categories"`
	User       *UserFilterInput     `json:"user"`
	// Logical AND of FilterInput
	And []*PostFilterInput `json:"AND"`
	// Logical OR of FilterInput
	Or []*PostFilterInput `json:"OR"`
	// Logical NOT of FilterInput
	Not *PostFilterInput `json:"NOT"`
}

// Ordering for Post
type PostOrdering struct {
	// Order Post by id
	ID *OrderingTypes `json:"id"`
	// Order Post by name
	Name *OrderingTypes `json:"name"`
}

type StringComparator struct {
	Eq          *string   `json:"eq"`
	Neq         *string   `json:"neq"`
	Contains    []*string `json:"contains"`
	NotContains []*string `json:"not_contains"`
	Like        *string   `json:"like"`
	Ilike       *string   `json:"ilike"`
	Suffix      *string   `json:"suffix"`
	Prefix      *string   `json:"prefix"`
}

type StringListComparator struct {
	Eq          []*string `json:"eq"`
	Neq         []*string `json:"neq"`
	Contains    []*string `json:"contains"`
	ContainedBy []*string `json:"containedBy"`
	Overlap     []*string `json:"overlap"`
}

type User struct {
	ID    int     `json:"id"`
	Name  string  `json:"name"`
	Posts []*Post `json:"posts"`
}

type UserFilterInput struct {
	ID    *IntComparator    `json:"id"`
	Name  *StringComparator `json:"name"`
	Posts *PostFilterInput  `json:"posts"`
	// Logical AND of FilterInput
	And []*UserFilterInput `json:"AND"`
	// Logical OR of FilterInput
	Or []*UserFilterInput `json:"OR"`
	// Logical NOT of FilterInput
	Not *UserFilterInput `json:"NOT"`
}

// Ordering for User
type UserOrdering struct {
	// Order User by id
	ID *OrderingTypes `json:"id"`
	// Order User by name
	Name *OrderingTypes `json:"name"`
}

type OrderingTypes string

const (
	OrderingTypesAsc           OrderingTypes = "ASC"
	OrderingTypesDesc          OrderingTypes = "DESC"
	OrderingTypesAscNullFirst  OrderingTypes = "ASC_NULL_FIRST"
	OrderingTypesDescNullFirst OrderingTypes = "DESC_NULL_FIRST"
)

var AllOrderingTypes = []OrderingTypes{
	OrderingTypesAsc,
	OrderingTypesDesc,
	OrderingTypesAscNullFirst,
	OrderingTypesDescNullFirst,
}

func (e OrderingTypes) IsValid() bool {
	switch e {
	case OrderingTypesAsc, OrderingTypesDesc, OrderingTypesAscNullFirst, OrderingTypesDescNullFirst:
		return true
	}
	return false
}

func (e OrderingTypes) String() string {
	return string(e)
}

func (e *OrderingTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderingTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid _OrderingTypes", str)
	}
	return nil
}

func (e OrderingTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RelationType string

const (
	RelationTypeOneToOne   RelationType = "ONE_TO_ONE"
	RelationTypeOneToMany  RelationType = "ONE_TO_MANY"
	RelationTypeManyToMany RelationType = "MANY_TO_MANY"
)

var AllRelationType = []RelationType{
	RelationTypeOneToOne,
	RelationTypeOneToMany,
	RelationTypeManyToMany,
}

func (e RelationType) IsValid() bool {
	switch e {
	case RelationTypeOneToOne, RelationTypeOneToMany, RelationTypeManyToMany:
		return true
	}
	return false
}

func (e RelationType) String() string {
	return string(e)
}

func (e *RelationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid _relationType", str)
	}
	return nil
}

func (e RelationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
